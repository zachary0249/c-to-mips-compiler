Program(StructTypeDecl( StructType( student ), VarDecl( ArrayType( CHAR, 50 ), name ), VarDecl( INT, age ), VarDecl( StructType( empty_stuct ), empt ) ), StructTypeDecl( StructType( empty_stuct ), VarDecl( PointerType( VOID ), x ) ), FunDecl( VOID, nested_empty, Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block( , Block(  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ), FunDecl( VOID, partialy_empty, Block( , Block( , Block( VarDecl( INT, x ), Block( , Block( VarDecl( CHAR, z ) ) ) ) ) ) ), FunDecl( VOID, valueAt, Block( VarDecl( INT, x ), VarDecl( PointerType( INT ), y ), VarDecl( INT, z ), VarDecl( INT, a ), ExprStmt( Assign( VarExpr( a ), IntLiteral( 4 ) ) ), ExprStmt( Assign( VarExpr( x ), IntLiteral( 5 ) ) ), ExprStmt( Assign( VarExpr( y ), AddressofExpr( VarExpr( x ) ) ) ), ExprStmt( Assign( VarExpr( z ), BinOp( BinOp( BinOp( BinOp( BinOp( ValueAtExpr( VarExpr( y ) ), MUL, VarExpr( x ) ), MUL, ValueAtExpr( VarExpr( y ) ) ), MUL, ValueAtExpr( VarExpr( y ) ) ), MUL, VarExpr( a ) ), MUL, ValueAtExpr( VarExpr( y ) ) ) ) ) ) ), FunDecl( VOID, nestedArrayIndexing, Block( VarDecl( ArrayType( INT, 10 ), a ), VarDecl( ArrayType( INT, 8 ), b ), VarDecl( ArrayType( INT, 5 ), c ), VarDecl( INT, d ), VarDecl( PointerType( INT ), e ), ExprStmt( Assign( VarExpr( d ), IntLiteral( 1 ) ) ), ExprStmt( Assign( ArrayAccessExpr( VarExpr( a ), ArrayAccessExpr( VarExpr( b ), ArrayAccessExpr( VarExpr( c ), VarExpr( d ) ) ) ), IntLiteral( 5 ) ) ) ) ), StructTypeDecl( StructType( a1 ), VarDecl( INT, a ) ), StructTypeDecl( StructType( a2 ), VarDecl( PointerType( StructType( a1 ) ), a ) ), VarDecl( PointerType( StructType( a2 ) ), a ), FunDecl( VOID, nestedStruct, Block( VarDecl( INT, x ), ExprStmt( Assign( VarExpr( x ), FieldAccessExpr( ValueAtExpr( FieldAccessExpr( ValueAtExpr( VarExpr( a ) ), a ) ), a ) ) ) ) ), StructTypeDecl( StructType( b1 ), VarDecl( ArrayType( INT, 10 ), b ), VarDecl( ArrayType( INT, 1 ), c ) ), FunDecl( VOID, accessingArrayField, Block( VarDecl( StructType( b1 ), s ), VarDecl( INT, x ), VarDecl( PointerType( INT ), y ), VarDecl( PointerType( INT ), z ), VarDecl( PointerType( PointerType( INT ) ), p ), ExprStmt( Assign( VarExpr( x ), IntLiteral( 1 ) ) ), ExprStmt( Assign( VarExpr( z ), AddressofExpr( VarExpr( x ) ) ) ), ExprStmt( Assign( VarExpr( p ), AddressofExpr( VarExpr( z ) ) ) ), ExprStmt( Assign( ArrayAccessExpr( FieldAccessExpr( VarExpr( s ), b ), IntLiteral( 1 ) ), IntLiteral( 0 ) ) ), ExprStmt( Assign( ArrayAccessExpr( FieldAccessExpr( VarExpr( s ), c ), ArrayAccessExpr( FieldAccessExpr( VarExpr( s ), b ), IntLiteral( 1 ) ) ), IntLiteral( 10 ) ) ), ExprStmt( Assign( VarExpr( y ), AddressofExpr( ArrayAccessExpr( FieldAccessExpr( VarExpr( s ), b ), ValueAtExpr( VarExpr( z ) ) ) ) ) ), ExprStmt( Assign( VarExpr( y ), AddressofExpr( ArrayAccessExpr( FieldAccessExpr( VarExpr( s ), b ), ValueAtExpr( ValueAtExpr( VarExpr( p ) ) ) ) ) ) ) ) ), FunDecl( VOID, arrayOfStructs, Block( VarDecl( ArrayType( StructType( b1 ), 5 ), s ), VarDecl( INT, i ), ExprStmt( Assign( VarExpr( i ), IntLiteral( 0 ) ) ), While( BinOp( VarExpr( i ), LT, IntLiteral( 5 ) ), Block( , ExprStmt( Assign( VarExpr( i ), BinOp( VarExpr( i ), ADD, IntLiteral( 1 ) ) ) ), ExprStmt( Assign( ArrayAccessExpr( FieldAccessExpr( ArrayAccessExpr( VarExpr( s ), VarExpr( i ) ), b ), IntLiteral( 1 ) ), IntLiteral( 0 ) ) ) ) ) ) ), FunDecl( VOID, empty, VarDecl( INT, x ), VarDecl( CHAR, c ), VarDecl( PointerType( CHAR ), s ), VarDecl( VOID, v ), VarDecl( PointerType( VOID ), vp ), VarDecl( StructType( student ), s1 ), Block( VarDecl( INT, y ), If( BinOp( VarExpr( x ), EQ, IntLiteral( 2 ) ), Block( , ExprStmt( Assign( VarExpr( y ), IntLiteral( 2 ) ) ), If( BinOp( VarExpr( x ), EQ, IntLiteral( 3 ) ), Block( , ExprStmt( Assign( VarExpr( y ), IntLiteral( 3 ) ) ), If( BinOp( VarExpr( x ), EQ, IntLiteral( 4 ) ), Block( , ExprStmt( FunCallExpr( print_s, StrLiteral( HERE ) ) ) ), Block( , If( BinOp( VarExpr( x ), EQ, IntLiteral( 6 ) ), Block( , ExprStmt( Assign( VarExpr( y ), BinOp( IntLiteral( 0 ), SUB, IntLiteral( 6 ) ) ) ) ), If( BinOp( VarExpr( x ), EQ, IntLiteral( 7 ) ), If( BinOp( VarExpr( x ), EQ, IntLiteral( 8 ) ), If( BinOp( VarExpr( x ), EQ, IntLiteral( 9 ) ), If( BinOp( VarExpr( x ), EQ, IntLiteral( 10 ) ), ExprStmt( Assign( VarExpr( y ), BinOp( IntLiteral( 0 ), SUB, IntLiteral( 1 ) ) ) ), ExprStmt( Assign( VarExpr( y ), IntLiteral( 0 ) ) ) ) ) ) ) ), If( BinOp( VarExpr( x ), EQ, IntLiteral( 10 ) ), Block( VarDecl( INT, z1 ), If( BinOp( VarExpr( x ), EQ, IntLiteral( 11 ) ), If( BinOp( VarExpr( x ), EQ, IntLiteral( 12 ) ), Block(  ) ) ) ) ) ) ), If( BinOp( VarExpr( x ), EQ, IntLiteral( 5 ) ), Block( , ExprStmt( Assign( VarExpr( y ), BinOp( IntLiteral( 0 ), SUB, IntLiteral( 5 ) ) ) ) ), Block( , ExprStmt( Assign( VarExpr( y ), BinOp( IntLiteral( 0 ), SUB, IntLiteral( 4 ) ) ) ) ) ) ), Block( , ExprStmt( Assign( VarExpr( y ), BinOp( IntLiteral( 0 ), SUB, IntLiteral( 3 ) ) ) ) ) ) ), Block( , ExprStmt( Assign( VarExpr( y ), BinOp( IntLiteral( 0 ), SUB, IntLiteral( 2 ) ) ) ) ) ), Return( BinOp( BinOp( FieldAccessExpr( VarExpr( s1 ), name ), EQ, VarExpr( NULL ) ), OR, BinOp( FieldAccessExpr( VarExpr( s1 ), age ), EQ, VarExpr( NULL ) ) ) ) ) ), FunDecl( VOID, main, Block( VarDecl( INT, n ), VarDecl( INT, first ), VarDecl( INT, second ), VarDecl( INT, next ), VarDecl( INT, c ), VarDecl( CHAR, t ), ExprStmt( Assign( VarExpr( n ), FunCallExpr( read_i ) ) ), ExprStmt( Assign( VarExpr( first ), IntLiteral( 0 ) ) ), ExprStmt( Assign( VarExpr( second ), IntLiteral( 1 ) ) ), ExprStmt( FunCallExpr( print_s, TypecastExpr( PointerType( CHAR ), StrLiteral( First  ) ) ) ), ExprStmt( FunCallExpr( print_i, VarExpr( n ) ) ), ExprStmt( FunCallExpr( print_s, TypecastExpr( PointerType( CHAR ), StrLiteral(  terms of Fibonacci
 series are :  ) ) ) ), ExprStmt( Assign( VarExpr( c ), IntLiteral( 0 ) ) ), While( BinOp( VarExpr( c ), LT, VarExpr( n ) ), Block( , If( BinOp( VarExpr( c ), LE, IntLiteral( 1 ) ), ExprStmt( Assign( VarExpr( next ), VarExpr( c ) ) ), Block( , ExprStmt( Assign( VarExpr( next ), BinOp( VarExpr( first ), ADD, VarExpr( second ) ) ) ), ExprStmt( Assign( VarExpr( first ), VarExpr( second ) ) ), ExprStmt( Assign( VarExpr( second ), VarExpr( next ) ) ) ) ), ExprStmt( FunCallExpr( print_i, VarExpr( next ) ) ), ExprStmt( FunCallExpr( print_s, TypecastExpr( PointerType( CHAR ), StrLiteral(   ) ) ) ), ExprStmt( Assign( VarExpr( c ), BinOp( VarExpr( c ), ADD, IntLiteral( 1 ) ) ) ) ) ) ) ))